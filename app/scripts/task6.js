/*
Задача 3

Наименьшее число m, такое, что m! делится без остатка
 на 10 — это m=5 (5! = 120). Аналогично, наименьшее число
 m, такое, что m! делится без остатка на 25 — это m=10.
 В общем случае, значение функции s(n) равно наименьшему 
 числу m, такому что m! без остатка делится на n. 
 Определим функцию S(M, N) = ∑s(n) для всех n ∈ [M, N].
  К примеру, S(6, 10) = 3 + 7 + 4 + 6 + 5 = 25. 
  Найдите S(860000000, 870000000). 

*/

function findFactorial(n){
	if(n - 1  === 0) {
		return 1;
	} if(n - 1  < 0) {
		return 0;
	}
	return n * findFactorial(n - 1);
}

function createArray(){
	var result = [],
			n = 0;
	for(var i = 1; i < 171; i++) {
		n = findFactorial(i);
		result.push(n);
	}
	return result;
}

//console.log(createArray());

function findS(fromM, toN) {

	var n = 0, //проверяемое число
			m = 0, //подбираемое наименьшее число, m! % n === 0
			result = 0, // сумма подходящих m
			arrayF = createArray(),
			resultI = "",
			timeBegin = Date.now(), //Для замера времени выполнения скрипта
			timeEnd = 0,  //Для замера времени выполнения скрипта
    	time = 0;  //Для замера времени выполнения скрипта

	for(var i = fromM; i <= toN; i++) {
		if(i % 10000 === 0) {
		}
		//console.log(i);
		n = i;
		for(var j = 1; j < 171; j++) {
			m  = arrayF[j];
			if(m % n === 0){
				result += j;
				resultI += i;
				break;
			}
		}
	}

	//console.log("сумма равна " + result);
	//console.log("Числа из диапазона " + resultI);
	//console.log("------------------");

	timeEnd = Date.now();
	time = timeEnd - timeBegin;

	//console.log("скрипт выполнялся " + time + " ms");

	return [result, time]
}

//findS(86, 87);
//findS(860, 870);
//findS(86000, 87000);
//findS(8600000, 8610000);
//findS(865000000, 870000000);

/*
for(var i = 5; i < 10; i++){
	var x = findFactorial(i)
	console.log("факториал "+ i + " равен "+ x);
	for(var j = 6; j< 10; j++) {
		//console.log("остаток от деления " +j+" = "+ (x % j));
	}
}

ответ 3376

/findS(860000000, 860500000);
сумма равна 21 163 118 19 20 87 18 task6.js:63:2
Числа из диапазона 860037750 860057984 860094464 860160000 860244000 860357984 860461056 

/Диапазон 860500000 - 861000000
сумма равна 21 21 121 126 task6.js:63:2
Числа из диапазона 860606208 860745600 860762112 860880896

findS(861000000, 862000000);
сумма равна 15 19 20 16 21 19 task6.js:63:2
Числа из диапазона 861020160 861485625 861495264 861696000 861780150 861840000 task6.js:64:2
------------------task6.js:65:2
скрипт выполнялся 588737 ms

findS(862000000, 863000000);
сумма равна 17 148 109 21 15 60 18 18 task6.js:63:2
Числа из диапазона 862202880 862257152 862453760 862557696 862617600 862666752 862701840 862912512 task6.js:64:2
------------------task6.js:65:2
скрипт выполнялся 1100316 ms


findS(863000000, 864000000);
сумма равна 21 18 49 143 16 21 21 task6.js:63:2
Числа из диапазона 863262400 863379000 863485952 863509216 863654400 863742528 863940000 task6.js:64:2
------------------task6.js:65:2
скрипт выполнялся 524959 ms

findS(864000000, 865000000);
сумма равна 25 20 20 21 18 21 118 94 14 task6.js:63:2
Числа из диапазона 864026624 864154200 864162432 864242379 864302400 864448200 864550912 864777632 864864000 task6.js:64:2
------------------task6.js:65:2
скрипт выполнялся 574513 ms

findS(865000000, 870000000);
сумма равна 21 149 18 112 85 20 20 17 94 19 21 141 18 20 21 19 152 21 21 19 20 26 18 16 74 16 18 95 19 21 18 20 19 56 21 20 task6.js:63:2
Числа из диапазона 865159680 865188232 865341225 865805792 865861632 865903500 866052000 866121984 866123776 866320000 866408400 866680832 866764800 866829600 866918052 867041280 867042560 867116250 867328000 867510000 867543040 868220928 868224000 868377510 868550656 868589568 868734720 868833205 869007360 869022000 869092224 869299200 869440000 869793792 869806080 869988600 task6.js:64:2
------------------task6.js:65:2
скрипт выполнялся 8281408 ms
*/